// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  username    String        @unique
  password    String
  role        Role          @default(User)
  created_at  DateTime      @default(now())
  questions   Question[]
  quizzes     Quiz[]
  QuizAttempt QuizAttempt[]
}

enum Role {
  Admin
  User
}

model Quiz {
  id          String @id @default(uuid())
  title       String
  description String

  questions Question[]

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  QuizAttempt QuizAttempt[]
}

model Question {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  content String
  answers Answer[]
  quizzes Quiz[]

  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  QuizAttemptDetail QuizAttemptDetail[]
}

model Answer {
  id          String   @id @default(uuid())
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id String   @map("questionId")

  content String
  status  Boolean

  created_at        DateTime            @default(now())
  QuizAttemptDetail QuizAttemptDetail[]
}

model QuizAttempt {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String

  score Int @default(0)

  created_at        DateTime            @default(now())
  QuizAttemptDetail QuizAttemptDetail[]
}

model QuizAttemptDetail {
  id              String      @id @default(uuid())
  quiz_attempt    QuizAttempt @relation(fields: [quiz_attempt_id], references: [id])
  quiz_attempt_id String

  question    Question @relation(fields: [question_id], references: [id])
  answer      Answer   @relation(fields: [answer_id], references: [id])
  question_id String
  answer_id   String

  correct Boolean
}
